#!/bin/bash
# Global pre-commit hook: Secret scanning with gitleaks, trufflehog, and ripsecrets
# Scans only staged files for maximum speed

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${CYAN}🔒 Secret Scanning Pre-Commit Hook${NC}"
echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✅ No files to scan${NC}"
    exit 0
fi

FILE_COUNT=$(echo "$STAGED_FILES" | wc -l | tr -d ' ')
echo -e "${BLUE}📁 Scanning ${FILE_COUNT} staged file(s)...${NC}"
echo ""

# Create temp directory for staged content
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# Copy staged content to temp directory
echo "$STAGED_FILES" | while read -r file; do
    if [ -f "$file" ] && [ "$file" != ".gitleaksignore" ]; then
        mkdir -p "$TEMP_DIR/$(dirname "$file")"
        git show ":$file" > "$TEMP_DIR/$file" 2>/dev/null || true
    fi
done

FAILED=0

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 1. Gitleaks (fast, general-purpose)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
echo -e "${YELLOW}[1/3] Running gitleaks...${NC}"
if ! command -v gitleaks &> /dev/null; then
    echo -e "${YELLOW}    ⚠️  gitleaks not installed - skipping${NC}"
    echo ""
else
    GITLEAKS_OUTPUT=$(gitleaks detect --source "$TEMP_DIR" --no-git --no-banner 2>&1 || true)

    if echo "$GITLEAKS_OUTPUT" | grep -q "no leaks found"; then
        echo -e "${GREEN}    ✓ No leaks found${NC}"
    elif echo "$GITLEAKS_OUTPUT" | grep -qE "[0-9]+ leaks found"; then
        LEAK_COUNT=$(echo "$GITLEAKS_OUTPUT" | grep -oE "[0-9]+ leaks found" | grep -oE "[0-9]+")
        echo -e "${RED}    ✗ Found ${LEAK_COUNT} potential leak(s)!${NC}"
        echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo "$GITLEAKS_OUTPUT" | grep -A 10 "Finding:" | head -30
        echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        FAILED=1
    else
        echo -e "${YELLOW}    ? Unexpected output:${NC}"
        echo "$GITLEAKS_OUTPUT" | head -5
    fi
    echo ""
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 2. TruffleHog (deep scanning with verification)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
echo -e "${YELLOW}[2/3] Running trufflehog...${NC}"
if ! command -v trufflehog &> /dev/null; then
    echo -e "${YELLOW}    ⚠️  trufflehog not installed - skipping${NC}"
    echo ""
else
    # Run trufflehog and capture output
    # Check if repo has .trufflehog.yaml config
    TRUFFLEHOG_CONFIG=""
    if [ -f "$(git rev-parse --show-toplevel)/.trufflehog.yaml" ]; then
        TRUFFLEHOG_CONFIG="--config=$(git rev-parse --show-toplevel)/.trufflehog.yaml"
    fi
  TRUFFLEHOG_FULL=$(trufflehog filesystem "$TEMP_DIR" --no-update --json $TRUFFLEHOG_CONFIG 2>&1 || true)

  if command -v jq &> /dev/null; then
      SECRET_JSON=$(echo "$TRUFFLEHOG_FULL" \
          | jq -c 'select(type == "object" and has("DetectorName") and has("Raw"))')
      SECRET_COUNT=$(echo "$SECRET_JSON" | jq -s 'length')

      if [ "$SECRET_COUNT" -gt 0 ]; then
          echo -e "${RED}    ✗ Found ${SECRET_COUNT} verified secret(s)!${NC}"
          echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
          echo "$SECRET_JSON" \
              | jq -r '"\(.DetectorName): \(.Raw[:100])"' \
              | head -10
          echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
          FAILED=1
      else
          echo -e "${GREEN}    ✓ No secrets found${NC}"
      fi
  else
        # Fallback if jq not available or no JSON output
        if [ -n "$TRUFFLEHOG_FULL" ] && ! echo "$TRUFFLEHOG_FULL" | grep -q "🐷"; then
            echo -e "${RED}    ✗ Potential secrets detected!${NC}"
            echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            echo "$TRUFFLEHOG_FULL" | head -20
            echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
            FAILED=1
        else
            echo -e "${GREEN}    ✓ No secrets found${NC}"
        fi
    fi
    echo ""
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 3. Ripsecrets (fast Rust-based scanning)
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
echo -e "${YELLOW}[3/3] Running ripsecrets...${NC}"
if ! command -v ripsecrets &> /dev/null; then
    echo -e "${YELLOW}    ⚠️  ripsecrets not installed - skipping${NC}"
    echo ""
else
    RIPSECRETS_OUTPUT=$(ripsecrets "$TEMP_DIR" 2>&1 || true)

    if [ -n "$RIPSECRETS_OUTPUT" ]; then
        SECRET_COUNT=$(echo "$RIPSECRETS_OUTPUT" | wc -l | tr -d ' ')
        echo -e "${RED}    ✗ Found ${SECRET_COUNT} potential secret(s)!${NC}"
        echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        echo "$RIPSECRETS_OUTPUT" | head -30
        echo -e "${RED}    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
        FAILED=1
    else
        echo -e "${GREEN}    ✓ No secrets found${NC}"
    fi
    echo ""
fi

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# Final verdict
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
if [ $FAILED -eq 1 ]; then
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}❌ COMMIT BLOCKED: Secrets detected!${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}⚠️  Review the findings above and remove secrets before committing.${NC}"
    echo -e "${YELLOW}💡 To bypass this check (NOT recommended): git commit --no-verify${NC}"
    exit 1
fi

echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ All secret scanners passed - commit allowed${NC}"
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
exit 0
